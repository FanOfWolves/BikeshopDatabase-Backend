// <auto-generated />
using System;
using DatabaseApi;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatabaseApi.Migrations
{
    [DbContext(typeof(BikeShop_Context))]
    partial class BikeShop_ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DatabaseApi.Bicycle", b =>
                {
                    b.Property<int>("Serialnumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SERIALNUMBER")
                        .HasColumnType("int");

                    b.Property<int?>("Chainstay")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CHAINSTAY")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Componentlist")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("COMPONENTLIST")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Construction")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CONSTRUCTION")
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("'Bonded'")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Customerid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CUSTOMERID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Customname")
                        .HasColumnName("CUSTOMNAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Employeeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EMPLOYEEID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Frameassembler")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FRAMEASSEMBLER")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Frameprice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FRAMEPRICE")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Framesize")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FRAMESIZE")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Headtubeangle")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HEADTUBEANGLE")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Letterstyleid")
                        .HasColumnName("LETTERSTYLEID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Listprice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LISTPRICE")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Modeltype")
                        .HasColumnName("MODELTYPE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Orderdate")
                        .HasColumnName("ORDERDATE")
                        .HasColumnType("date");

                    b.Property<int?>("Painter")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PAINTER")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Paintid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PAINTID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Saleprice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SALEPRICE")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Salestate")
                        .HasColumnName("SALESTATE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Salestax")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SALESTAX")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Seattubeangle")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SEATTUBEANGLE")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime?>("Shipdate")
                        .HasColumnName("SHIPDATE")
                        .HasColumnType("date");

                    b.Property<int?>("Shipemployee")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SHIPEMPLOYEE")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Shipprice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SHIPPRICE")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime?>("Startdate")
                        .HasColumnName("STARTDATE")
                        .HasColumnType("date");

                    b.Property<int?>("Storeid")
                        .HasColumnName("STOREID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Toptube")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TOPTUBE")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Waterbottlebrazeons")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WATERBOTTLEBRAZEONS")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'4'");

                    b.HasKey("Serialnumber")
                        .HasName("PRIMARY");

                    b.HasIndex("Customerid")
                        .HasName("FK_BIKECUSTOMER");

                    b.HasIndex("Employeeid")
                        .HasName("FK_BIKEEMPLOYEE");

                    b.HasIndex("Letterstyleid")
                        .HasName("FK_BIKELETTER");

                    b.HasIndex("Modeltype")
                        .HasName("FK_BIKEMODELTYPE");

                    b.HasIndex("Paintid")
                        .HasName("FK_BIKEPAINT");

                    b.HasIndex("Serialnumber")
                        .IsUnique()
                        .HasName("PK_BICYCLE");

                    b.HasIndex("Storeid")
                        .HasName("FK_BIKERETAIL");

                    b.ToTable("BICYCLE");
                });

            modelBuilder.Entity("DatabaseApi.Bicycletubeusage", b =>
                {
                    b.Property<int>("Serialnumber")
                        .HasColumnName("SERIALNUMBER")
                        .HasColumnType("int");

                    b.Property<int>("Tubeid")
                        .HasColumnName("TUBEID")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QUANTITY")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Serialnumber", "Tubeid")
                        .HasName("PRIMARY");

                    b.HasIndex("Tubeid")
                        .HasName("FK_REFERENCE27");

                    b.HasIndex("Serialnumber", "Tubeid")
                        .IsUnique()
                        .HasName("PK_BICYCLETUBEUSAGE");

                    b.ToTable("BICYCLETUBEUSAGE");
                });

            modelBuilder.Entity("DatabaseApi.Bikeparts", b =>
                {
                    b.Property<int>("Serialnumber")
                        .HasColumnName("SERIALNUMBER")
                        .HasColumnType("int");

                    b.Property<int>("Componentid")
                        .HasColumnName("COMPONENTID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateinstalled")
                        .HasColumnName("DATEINSTALLED")
                        .HasColumnType("date");

                    b.Property<int?>("Employeeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EMPLOYEEID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Location")
                        .HasColumnName("LOCATION")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QUANTITY")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Substituteid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SUBSTITUTEID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Serialnumber", "Componentid")
                        .HasName("PRIMARY");

                    b.HasIndex("Componentid")
                        .HasName("FK_REFERENCE5");

                    b.HasIndex("Employeeid")
                        .HasName("FK_REFERENCE4");

                    b.HasIndex("Serialnumber", "Componentid")
                        .IsUnique()
                        .HasName("PK_BIKEPARTS");

                    b.ToTable("BIKEPARTS");
                });

            modelBuilder.Entity("DatabaseApi.Biketubes", b =>
                {
                    b.Property<int>("Serialnumber")
                        .HasColumnName("SERIALNUMBER")
                        .HasColumnType("int");

                    b.Property<string>("Tubename")
                        .HasColumnName("TUBENAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Length")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LENGTH")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Tubeid")
                        .HasColumnName("TUBEID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Serialnumber", "Tubename")
                        .HasName("PRIMARY");

                    b.HasIndex("Tubeid")
                        .HasName("FK_TUBEMATERIALBIKETUBES");

                    b.HasIndex("Serialnumber", "Tubename")
                        .IsUnique()
                        .HasName("PK_BIKETUBES");

                    b.ToTable("BIKETUBES");
                });

            modelBuilder.Entity("DatabaseApi.City", b =>
                {
                    b.Property<int>("Cityid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CITYID")
                        .HasColumnType("int");

                    b.Property<string>("Areacode")
                        .HasColumnName("AREACODE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("City1")
                        .HasColumnName("CITY")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .HasColumnName("COUNTRY")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Latitude")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LATITUDE")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Longitude")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LONGITUDE")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Population1980")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("POPULATION1980")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Population1990")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("POPULATION1990")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Populationcdf")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("POPULATIONCDF")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("State")
                        .HasColumnName("STATE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Zipcode")
                        .HasColumnName("ZIPCODE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Cityid");

                    b.HasIndex("Cityid")
                        .IsUnique()
                        .HasName("PK_CITY");

                    b.ToTable("CITY");
                });

            modelBuilder.Entity("DatabaseApi.Commonsizes", b =>
                {
                    b.Property<string>("Modeltype")
                        .HasColumnName("MODELTYPE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Framesize")
                        .HasColumnName("FRAMESIZE")
                        .HasColumnType("int");

                    b.HasKey("Modeltype", "Framesize")
                        .HasName("PRIMARY");

                    b.HasIndex("Modeltype", "Framesize")
                        .IsUnique()
                        .HasName("PK_COMMONSIZES");

                    b.ToTable("COMMONSIZES");
                });

            modelBuilder.Entity("DatabaseApi.Component", b =>
                {
                    b.Property<int>("Componentid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("COMPONENTID")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnName("CATEGORY")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Endyear")
                        .HasColumnName("ENDYEAR")
                        .HasColumnType("int");

                    b.Property<int?>("Estimatedcost")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ESTIMATEDCOST")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Height")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HEIGHT")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Length")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LENGTH")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Listprice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LISTPRICE")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Manufacturerid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MANUFACTURERID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Productint")
                        .HasColumnName("PRODUCTINT")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Quantityonhand")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QUANTITYONHAND")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'10'");

                    b.Property<string>("Road")
                        .HasColumnName("ROAD")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WEIGHT")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Width")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WIDTH")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Year")
                        .HasColumnName("YEAR")
                        .HasColumnType("int");

                    b.HasKey("Componentid");

                    b.HasIndex("Category")
                        .HasName("FK_REFERENCE");

                    b.HasIndex("Componentid")
                        .IsUnique()
                        .HasName("PK_COMPONENT");

                    b.HasIndex("Manufacturerid")
                        .HasName("FK_REFERENCE16");

                    b.ToTable("COMPONENT");
                });

            modelBuilder.Entity("DatabaseApi.Componentname", b =>
                {
                    b.Property<string>("Componentname1")
                        .HasColumnName("COMPONENTNAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Assemblyorder")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ASSEMBLYORDER")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Componentname1")
                        .HasName("PRIMARY");

                    b.HasIndex("Componentname1")
                        .IsUnique()
                        .HasName("PK_COMPONENTNAME");

                    b.ToTable("COMPONENTNAME");
                });

            modelBuilder.Entity("DatabaseApi.Customer", b =>
                {
                    b.Property<int>("Customerid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CUSTOMERID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Balancedue")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BALANCEDUE")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Cityid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CITYID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Firstname")
                        .HasColumnName("FIRSTNAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Lastname")
                        .HasColumnName("LASTNAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Zipcode")
                        .HasColumnName("ZIPCODE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Customerid");

                    b.HasIndex("Cityid")
                        .HasName("FK_CITYCUSTOMER");

                    b.HasIndex("Customerid")
                        .IsUnique()
                        .HasName("PK_CUSTOMER");

                    b.ToTable("CUSTOMER");
                });

            modelBuilder.Entity("DatabaseApi.Customertransaction", b =>
                {
                    b.Property<int>("Customerid")
                        .HasColumnName("CUSTOMERID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Transactiondate")
                        .HasColumnName("TRANSACTIONDATE")
                        .HasColumnType("date");

                    b.Property<int?>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AMOUNT")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int?>("Employeeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EMPLOYEEID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Reference")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("REFERENCE")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Customerid", "Transactiondate")
                        .HasName("PRIMARY");

                    b.HasIndex("Customerid", "Transactiondate")
                        .IsUnique()
                        .HasName("PK_CUSTOMERTRANSACTION");

                    b.ToTable("CUSTOMERTRANSACTION");
                });

            modelBuilder.Entity("DatabaseApi.Employee", b =>
                {
                    b.Property<int>("Employeeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EMPLOYEEID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Cityid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CITYID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Currentmanager")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CURRENTMANAGER")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime?>("Datehired")
                        .HasColumnName("DATEHIRED")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Datereleased")
                        .HasColumnName("DATERELEASED")
                        .HasColumnType("date");

                    b.Property<string>("Firstname")
                        .HasColumnName("FIRSTNAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Homephone")
                        .HasColumnName("HOMEPHONE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Lastname")
                        .HasColumnName("LASTNAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Salary")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SALARY")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Salarygrade")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SALARYGRADE")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Taxpayerid")
                        .HasColumnName("TAXPAYERID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .HasColumnName("TITLE")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Workarea")
                        .HasColumnName("WORKAREA")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Zipcode")
                        .HasColumnName("ZIPCODE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Employeeid");

                    b.HasIndex("Cityid")
                        .HasName("FK_CITYEMPLOYEE");

                    b.HasIndex("Employeeid")
                        .IsUnique()
                        .HasName("PK_EMPLOYEE");

                    b.ToTable("EMPLOYEE");
                });

            modelBuilder.Entity("DatabaseApi.Groupcomponents", b =>
                {
                    b.Property<int>("Groupid")
                        .HasColumnName("GROUPID")
                        .HasColumnType("int");

                    b.Property<int>("Componentid")
                        .HasColumnName("COMPONENTID")
                        .HasColumnType("int");

                    b.HasKey("Groupid", "Componentid")
                        .HasName("PRIMARY");

                    b.HasIndex("Componentid")
                        .HasName("FK_REFERENCE14");

                    b.HasIndex("Groupid", "Componentid")
                        .IsUnique()
                        .HasName("PK_GROUPCOMPONENTS");

                    b.ToTable("GROUPCOMPONENTS");
                });

            modelBuilder.Entity("DatabaseApi.Groupo", b =>
                {
                    b.Property<int>("Componentgroupid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("COMPONENTGROUPID")
                        .HasColumnType("int");

                    b.Property<string>("Biketype")
                        .HasColumnName("BIKETYPE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Endyear")
                        .HasColumnName("ENDYEAR")
                        .HasColumnType("int");

                    b.Property<string>("Groupname")
                        .HasColumnName("GROUPNAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Weight")
                        .HasColumnName("WEIGHT")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnName("YEAR")
                        .HasColumnType("int");

                    b.HasKey("Componentgroupid")
                        .HasName("PRIMARY");

                    b.HasIndex("Componentgroupid")
                        .IsUnique()
                        .HasName("PK_GROUPO");

                    b.ToTable("GROUPO");
                });

            modelBuilder.Entity("DatabaseApi.Letterstyle", b =>
                {
                    b.Property<string>("Letterstyle1")
                        .HasColumnName("LETTERSTYLE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Letterstyle1")
                        .HasName("PRIMARY");

                    b.HasIndex("Letterstyle1")
                        .IsUnique()
                        .HasName("PK_LETTERSTYLE");

                    b.ToTable("LETTERSTYLE");
                });

            modelBuilder.Entity("DatabaseApi.Manufacturer", b =>
                {
                    b.Property<int>("Manufacturerid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MANUFACTURERID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Balancedue")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BALANCEDUE")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Cityid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CITYID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Contactname")
                        .HasColumnName("CONTACTNAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Manufacturername")
                        .HasColumnName("MANUFACTURERNAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Zipcode")
                        .HasColumnName("ZIPCODE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Manufacturerid");

                    b.HasIndex("Cityid")
                        .HasName("FK_CITYMANUFACTURER");

                    b.HasIndex("Manufacturerid")
                        .IsUnique()
                        .HasName("PK_MANUFACTURER");

                    b.ToTable("MANUFACTURER");
                });

            modelBuilder.Entity("DatabaseApi.Manufacturertransaction", b =>
                {
                    b.Property<int>("Manufacturerid")
                        .HasColumnName("MANUFACTURERID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Transactiondate")
                        .HasColumnName("TRANSACTIONDATE")
                        .HasColumnType("date");

                    b.Property<int>("Reference")
                        .HasColumnName("REFERENCE")
                        .HasColumnType("int");

                    b.Property<int?>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AMOUNT")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int?>("Employeeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EMPLOYEEID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Manufacturerid", "Transactiondate", "Reference")
                        .HasName("PRIMARY");

                    b.HasIndex("Manufacturerid", "Transactiondate", "Reference")
                        .IsUnique()
                        .HasName("PK_MANUFTRANSACTION");

                    b.ToTable("MANUFACTURERTRANSACTION");
                });

            modelBuilder.Entity("DatabaseApi.Modelsize", b =>
                {
                    b.Property<string>("Modeltype")
                        .HasColumnName("MODELTYPE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Msize")
                        .HasColumnName("MSIZE")
                        .HasColumnType("int");

                    b.Property<int?>("Chainstay")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CHAINSTAY")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Groundclearance")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GROUNDCLEARANCE")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Headtubeangle")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HEADTUBEANGLE")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Seattubeangle")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SEATTUBEANGLE")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Toptube")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TOPTUBE")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Totallength")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TOTALLENGTH")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Modeltype", "Msize")
                        .HasName("PRIMARY");

                    b.HasIndex("Modeltype", "Msize")
                        .IsUnique()
                        .HasName("PK_MODELSIZE");

                    b.ToTable("MODELSIZE");
                });

            modelBuilder.Entity("DatabaseApi.Modeltype", b =>
                {
                    b.Property<string>("Modeltype1")
                        .HasColumnName("MODELTYPE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Componentid")
                        .HasColumnName("COMPONENTID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Modeltype1")
                        .HasName("PRIMARY");

                    b.HasIndex("Modeltype1")
                        .IsUnique()
                        .HasName("PK_MODELTYPE");

                    b.ToTable("MODELTYPE");
                });

            modelBuilder.Entity("DatabaseApi.Paint", b =>
                {
                    b.Property<int>("Paintid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PAINTID")
                        .HasColumnType("int");

                    b.Property<string>("Colorlist")
                        .HasColumnName("COLORLIST")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Colorname")
                        .HasColumnName("COLORNAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Colorstyle")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("COLORSTYLE")
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("'Solid'")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Datediscontinued")
                        .HasColumnName("DATEDISCONTINUED")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Dateintroduced")
                        .HasColumnName("DATEINTRODUCED")
                        .HasColumnType("date");

                    b.HasKey("Paintid");

                    b.HasIndex("Paintid")
                        .IsUnique()
                        .HasName("PK_PAINT");

                    b.ToTable("PAINT");
                });

            modelBuilder.Entity("DatabaseApi.Preference", b =>
                {
                    b.Property<string>("Itemname")
                        .HasColumnName("ITEMNAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Datechanged")
                        .HasColumnName("DATECHANGED")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int?>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VALUE")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Itemname")
                        .HasName("PRIMARY");

                    b.HasIndex("Itemname")
                        .IsUnique()
                        .HasName("PK_PREFERENCE");

                    b.ToTable("PREFERENCE");
                });

            modelBuilder.Entity("DatabaseApi.Purchaseitem", b =>
                {
                    b.Property<int>("Purchaseid")
                        .HasColumnName("PURCHASEID")
                        .HasColumnType("int");

                    b.Property<int>("Componentid")
                        .HasColumnName("COMPONENTID")
                        .HasColumnType("int");

                    b.Property<int?>("Pricepaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRICEPAID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QUANTITY")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Quantityreceived")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QUANTITYRECEIVED")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Purchaseid", "Componentid")
                        .HasName("PRIMARY");

                    b.HasIndex("Componentid")
                        .HasName("FK_REFERENCE21");

                    b.HasIndex("Purchaseid", "Componentid")
                        .IsUnique()
                        .HasName("PK_PURCHASEITEM");

                    b.ToTable("PURCHASEITEM");
                });

            modelBuilder.Entity("DatabaseApi.Purchaseorder", b =>
                {
                    b.Property<int>("Purchaseid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PURCHASEID")
                        .HasColumnType("int");

                    b.Property<int?>("Amountdue")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AMOUNTDUE")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DISCOUNT")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Employeeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EMPLOYEEID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Manufacturerid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MANUFACTURERID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime?>("Orderdate")
                        .HasColumnName("ORDERDATE")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Receivedate")
                        .HasColumnName("RECEIVEDATE")
                        .HasColumnType("date");

                    b.Property<int?>("Shippingcost")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SHIPPINGCOST")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Totallist")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TOTALLIST")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Purchaseid")
                        .HasName("PRIMARY");

                    b.HasIndex("Employeeid")
                        .HasName("FK_REFERENCE23");

                    b.HasIndex("Manufacturerid")
                        .HasName("FK_REFERENCE22");

                    b.HasIndex("Purchaseid")
                        .IsUnique()
                        .HasName("PK_PURCHASEORDER");

                    b.ToTable("PURCHASEORDER");
                });

            modelBuilder.Entity("DatabaseApi.Retailstore", b =>
                {
                    b.Property<int>("Storeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("STOREID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Cityid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CITYID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Contactfirstname")
                        .HasColumnName("CONTACTFIRSTNAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Contactlastname")
                        .HasColumnName("CONTACTLASTNAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Storename")
                        .HasColumnName("STORENAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Zipcode")
                        .HasColumnName("ZIPCODE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Storeid")
                        .HasName("PRIMARY");

                    b.HasIndex("Cityid")
                        .HasName("FK_CITYRETAILSTORE");

                    b.HasIndex("Storeid")
                        .IsUnique()
                        .HasName("PK_RETAILSTORE");

                    b.ToTable("RETAILSTORE");
                });

            modelBuilder.Entity("DatabaseApi.Revisionhistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Changedate")
                        .HasColumnName("CHANGEDATE")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Revisioncomments")
                        .HasColumnName("REVISIONCOMMENTS")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Version")
                        .HasColumnName("VERSION")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("PK_REVISIONHISTORY");

                    b.ToTable("REVISIONHISTORY");
                });

            modelBuilder.Entity("DatabaseApi.Samplename", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<string>("Firstname")
                        .HasColumnName("FIRSTNAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Gender")
                        .HasColumnName("GENDER")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Lastname")
                        .HasColumnName("LASTNAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("PK_SAMPLENAME");

                    b.ToTable("SAMPLENAME");
                });

            modelBuilder.Entity("DatabaseApi.Samplestreet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<string>("Baseaddress")
                        .HasColumnName("BASEADDRESS")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("PK_SAMPLESTREET");

                    b.ToTable("SAMPLESTREET");
                });

            modelBuilder.Entity("DatabaseApi.Statetaxrate", b =>
                {
                    b.Property<string>("State")
                        .HasColumnName("STATE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Taxrate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TAXRATE")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("State")
                        .HasName("PRIMARY");

                    b.HasIndex("State")
                        .IsUnique()
                        .HasName("PK_STATETAXRATE");

                    b.ToTable("STATETAXRATE");
                });

            modelBuilder.Entity("DatabaseApi.Tempdatemade", b =>
                {
                    b.Property<DateTime>("Datevalue")
                        .HasColumnName("DATEVALUE")
                        .HasColumnType("date");

                    b.Property<int?>("Madecount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MADECOUNT")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Datevalue")
                        .HasName("PRIMARY");

                    b.HasIndex("Datevalue")
                        .IsUnique()
                        .HasName("PK_TEMPDATEMADE");

                    b.ToTable("TEMPDATEMADE");
                });

            modelBuilder.Entity("DatabaseApi.Tubematerial", b =>
                {
                    b.Property<int>("Tubeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TUBEID")
                        .HasColumnType("int");

                    b.Property<string>("Construction")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CONSTRUCTION")
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("'Bonded'")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Diameter")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DIAMETER")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Listprice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LISTPRICE")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Material")
                        .HasColumnName("MATERIAL")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Roundness")
                        .HasColumnName("ROUNDNESS")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Stiffness")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("STIFFNESS")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Thickness")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("THICKNESS")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WEIGHT")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Tubeid")
                        .HasName("PRIMARY");

                    b.HasIndex("Tubeid")
                        .IsUnique()
                        .HasName("PK_TUBEMATERIAL");

                    b.ToTable("TUBEMATERIAL");
                });

            modelBuilder.Entity("DatabaseApi.Workarea", b =>
                {
                    b.Property<string>("Workarea1")
                        .HasColumnName("WORKAREA")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Workarea1")
                        .HasName("PRIMARY");

                    b.HasIndex("Workarea1")
                        .IsUnique()
                        .HasName("PK_WORKAREA");

                    b.ToTable("WORKAREA");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DatabaseApi.Bicycle", b =>
                {
                    b.HasOne("DatabaseApi.Customer", "Customer")
                        .WithMany("Bicycle")
                        .HasForeignKey("Customerid")
                        .HasConstraintName("FK_BIKECUSTOMER");

                    b.HasOne("DatabaseApi.Employee", "Employee")
                        .WithMany("Bicycle")
                        .HasForeignKey("Employeeid")
                        .HasConstraintName("FK_BIKEEMPLOYEE");

                    b.HasOne("DatabaseApi.Letterstyle", "Letterstyle")
                        .WithMany("Bicycle")
                        .HasForeignKey("Letterstyleid")
                        .HasConstraintName("FK_BIKELETTER");

                    b.HasOne("DatabaseApi.Modeltype", "ModeltypeNavigation")
                        .WithMany("Bicycle")
                        .HasForeignKey("Modeltype")
                        .HasConstraintName("FK_BIKEMODELTYPE");

                    b.HasOne("DatabaseApi.Paint", "Paint")
                        .WithMany()
                        .HasForeignKey("Paintid");

                    b.HasOne("DatabaseApi.Retailstore", "Store")
                        .WithMany("Bicycle")
                        .HasForeignKey("Storeid")
                        .HasConstraintName("FK_BIKERETAIL");
                });

            modelBuilder.Entity("DatabaseApi.Bicycletubeusage", b =>
                {
                    b.HasOne("DatabaseApi.Bicycle", "SerialnumberNavigation")
                        .WithMany("Bicycletubeusage")
                        .HasForeignKey("Serialnumber")
                        .HasConstraintName("FK_REFERENCE26")
                        .IsRequired();

                    b.HasOne("DatabaseApi.Tubematerial", "Tube")
                        .WithMany("Bicycletubeusage")
                        .HasForeignKey("Tubeid")
                        .HasConstraintName("FK_REFERENCE27")
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseApi.Bikeparts", b =>
                {
                    b.HasOne("DatabaseApi.Component", "Component")
                        .WithMany("Bikeparts")
                        .HasForeignKey("Componentid")
                        .HasConstraintName("FK_REFERENCE5")
                        .IsRequired();

                    b.HasOne("DatabaseApi.Employee", "Employee")
                        .WithMany("Bikeparts")
                        .HasForeignKey("Employeeid")
                        .HasConstraintName("FK_REFERENCE4");

                    b.HasOne("DatabaseApi.Bicycle", null)
                        .WithMany("Bikeparts")
                        .HasForeignKey("Serialnumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseApi.Biketubes", b =>
                {
                    b.HasOne("DatabaseApi.Bicycle", "SerialnumberNavigation")
                        .WithMany("Biketubes")
                        .HasForeignKey("Serialnumber")
                        .HasConstraintName("FK_REFERENCE6")
                        .IsRequired();

                    b.HasOne("DatabaseApi.Tubematerial", "Tube")
                        .WithMany("Biketubes")
                        .HasForeignKey("Tubeid")
                        .HasConstraintName("FK_TUBEMATERIALBIKETUBES");
                });

            modelBuilder.Entity("DatabaseApi.Component", b =>
                {
                    b.HasOne("DatabaseApi.Componentname", "CategoryNavigation")
                        .WithMany("Component")
                        .HasForeignKey("Category")
                        .HasConstraintName("FK_REFERENCE");

                    b.HasOne("DatabaseApi.Manufacturer", "Manufacturer")
                        .WithMany("Component")
                        .HasForeignKey("Manufacturerid")
                        .HasConstraintName("FK_REFERENCE16");
                });

            modelBuilder.Entity("DatabaseApi.Customer", b =>
                {
                    b.HasOne("DatabaseApi.City", "City")
                        .WithMany("Customer")
                        .HasForeignKey("Cityid")
                        .HasConstraintName("FK_CITYCUSTOMER");
                });

            modelBuilder.Entity("DatabaseApi.Customertransaction", b =>
                {
                    b.HasOne("DatabaseApi.Customer", "Customer")
                        .WithMany("Customertransaction")
                        .HasForeignKey("Customerid")
                        .HasConstraintName("FK_REFERENCE18")
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseApi.Employee", b =>
                {
                    b.HasOne("DatabaseApi.City", "City")
                        .WithMany("Employee")
                        .HasForeignKey("Cityid")
                        .HasConstraintName("FK_CITYEMPLOYEE");
                });

            modelBuilder.Entity("DatabaseApi.Groupcomponents", b =>
                {
                    b.HasOne("DatabaseApi.Component", "Component")
                        .WithMany("Groupcomponents")
                        .HasForeignKey("Componentid")
                        .HasConstraintName("FK_REFERENCE14")
                        .IsRequired();

                    b.HasOne("DatabaseApi.Groupo", "Group")
                        .WithMany("Groupcomponents")
                        .HasForeignKey("Groupid")
                        .HasConstraintName("FK_REFERENCE15")
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseApi.Manufacturer", b =>
                {
                    b.HasOne("DatabaseApi.City", "City")
                        .WithMany("Manufacturer")
                        .HasForeignKey("Cityid")
                        .HasConstraintName("FK_CITYMANUFACTURER");
                });

            modelBuilder.Entity("DatabaseApi.Manufacturertransaction", b =>
                {
                    b.HasOne("DatabaseApi.Manufacturer", "Manufacturer")
                        .WithMany("Manufacturertransaction")
                        .HasForeignKey("Manufacturerid")
                        .HasConstraintName("FK_MANUFTRANS")
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseApi.Modelsize", b =>
                {
                    b.HasOne("DatabaseApi.Modeltype", "ModeltypeNavigation")
                        .WithMany("Modelsize")
                        .HasForeignKey("Modeltype")
                        .HasConstraintName("FK_MODELTYPE")
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseApi.Purchaseitem", b =>
                {
                    b.HasOne("DatabaseApi.Component", "Component")
                        .WithMany("Purchaseitem")
                        .HasForeignKey("Componentid")
                        .HasConstraintName("FK_REFERENCE21")
                        .IsRequired();

                    b.HasOne("DatabaseApi.Purchaseorder", "Purchase")
                        .WithMany("Purchaseitem")
                        .HasForeignKey("Purchaseid")
                        .HasConstraintName("FK_REFERENCE20")
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseApi.Purchaseorder", b =>
                {
                    b.HasOne("DatabaseApi.Employee", "Employee")
                        .WithMany("Purchaseorder")
                        .HasForeignKey("Employeeid")
                        .HasConstraintName("FK_REFERENCE23");

                    b.HasOne("DatabaseApi.Manufacturer", "Manufacturer")
                        .WithMany("Purchaseorder")
                        .HasForeignKey("Manufacturerid")
                        .HasConstraintName("FK_REFERENCE22");
                });

            modelBuilder.Entity("DatabaseApi.Retailstore", b =>
                {
                    b.HasOne("DatabaseApi.City", "City")
                        .WithMany("Retailstore")
                        .HasForeignKey("Cityid")
                        .HasConstraintName("FK_CITYRETAILSTORE");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
